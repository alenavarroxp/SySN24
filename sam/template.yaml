AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for SySN24

Parameters:
  RoleARN:
    Type: String
    Default: arn:aws:iam::208497263506:role/LabRole
    Description: ARN del rol que usar√°n las funciones Lambda
  EmailSubscription:
    Type: String
    Description: "Email address to subscribe to SNS topic"
  GitHubOauthToken:
    Type: String
    Description: "GitHub OAuth token to access the repository. Important! The token is in the documentation."
    Default: "ghp_wcs********"

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key, X-Requested-With'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"

  GetProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/getProducts/app.lambda_handler
      Runtime: python3.10
      CodeUri: .
      Role: !Ref RoleARN
      Policies:
        - DynamoDBReadPolicy:
            TableName: Products
      Environment:
        Variables:
          TABLE_NAME: Products
      Events:
        GetProductsAPI:
          Type: Api
          Properties:
            Path: /products
            Method: GET
            RestApiId: !Ref ApiGatewayApi

  InsertProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/insertProducts/app.lambda_handler
      Runtime: python3.10
      CodeUri: .
      Role: !Ref RoleARN
      Policies:
        - DynamoDBReadPolicy:
            TableName: Products
      Environment:
        Variables:
          TABLE_NAME: Products
      Events:
        InsertProductsAPI:
          Type: Api
          Properties:
            Path: /products
            Method: POST
            RestApiId: !Ref ApiGatewayApi

  BuyProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/postBuy/app.lambda_handler
      Runtime: python3.10
      CodeUri: .
      Role: !Ref RoleARN
      Policies:
        - DynamoDBReadPolicy:
            TableName: Products
        - DynamoDBWritePolicy:
            TableName: Orders
        - S3WritePolicy:
            BucketName: !Ref PDFStorageBucket
      Environment:
        Variables:
          TABLE_NAME: Products
          PDF_BUCKET: !Ref PDFStorageBucket
          ORDERS_TABLE_NAME: Orders
      Events:
        BuyProductsAPI:
          Type: Api
          Properties:
            Path: /buy
            Method: POST
            RestApiId: !Ref ApiGatewayApi

  SendTicketFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/sendTicket/app.lambda_handler
      Runtime: python3.10
      CodeUri: .
      Role: !Ref RoleARN
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref PDFStorageBucket
        - SNSPublishMessagePolicy:
            TopicName: PDFTopic
        - Statement:
            Effect: Allow
            Action: s3:PutBucketNotification
            Resource: !Sub "arn:aws:s3:::${PDFStorageBucket}"
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref PDFTopic
      Events:
        S3Trigger:
          Type: S3
          Properties:
            Bucket: !Ref PDFStorageBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .pdf

  StockAlertFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/stockAlert/app.lambda_handler
      Runtime: python3.10
      CodeUri: .
      Role: !Ref RoleARN
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: StockAlertTopic
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref StockAlertTopic
      Events:
        DynamoDBTrigger:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt ProductsTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 5


  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Products
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Orders
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  PDFStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: sy24-pdf-storage
      AccessControl: Private

  PDFTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: PDFTopic
      
  StockAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: StockAlertTopic

  PDFSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref EmailSubscription
      Protocol: email
      TopicArn: !Ref 'PDFTopic'

  StockAlertSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref EmailSubscription
      Protocol: email
      TopicArn: !Ref 'StockAlertTopic'

  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: "SySN2425AmplifyApp"
      Description: "Amplify App for SySN24"
      Repository: "https://github.com/alenavarroxp/SySN24"
      OauthToken: !Ref GitHubOauthToken
      BuildSpec: |
        version: 1.0
        frontend:
          phases:
            preBuild:
              commands:
               - npm ci
            build:
              commands:
                - npm run build
          artifacts:
            baseDirectory: dist
            files:
              - '**/*'
          cache:
            paths:
              - node_modules/**/*
        
      EnvironmentVariables:
        - Name: VITE_API_GATEWAY_URL
          Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"

  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: "main"
      Description: "Main branch"
      EnableAutoBuild: true
              
      
Outputs:
  ApiGatewayApiUrl:
    Description: "URL of the API Gateway"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"

  DefaultDomain:
    Value: !GetAtt AmplifyApp.DefaultDomain

  MasterBranchUrl:
    Value: !Join [ ".", [ !GetAtt AmplifyBranch.BranchName, !GetAtt AmplifyApp.DefaultDomain ]]
  
  AmplifyAppId:
    Description: "App ID del Amplify App"
    Value: !GetAtt AmplifyApp.AppId




